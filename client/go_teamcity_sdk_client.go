// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cvbarros/go-teamcity-sdk/client/agent"
	"github.com/cvbarros/go-teamcity-sdk/client/agent_pool"
	"github.com/cvbarros/go-teamcity-sdk/client/build"
	"github.com/cvbarros/go-teamcity-sdk/client/build_queue"
	"github.com/cvbarros/go-teamcity-sdk/client/build_type"
	"github.com/cvbarros/go-teamcity-sdk/client/change"
	"github.com/cvbarros/go-teamcity-sdk/client/debug"
	"github.com/cvbarros/go-teamcity-sdk/client/federation"
	"github.com/cvbarros/go-teamcity-sdk/client/group"
	"github.com/cvbarros/go-teamcity-sdk/client/investigation"
	"github.com/cvbarros/go-teamcity-sdk/client/mute"
	"github.com/cvbarros/go-teamcity-sdk/client/operations"
	"github.com/cvbarros/go-teamcity-sdk/client/problem"
	"github.com/cvbarros/go-teamcity-sdk/client/project"
	"github.com/cvbarros/go-teamcity-sdk/client/server"
	"github.com/cvbarros/go-teamcity-sdk/client/test"
	"github.com/cvbarros/go-teamcity-sdk/client/test_occurrence"
	"github.com/cvbarros/go-teamcity-sdk/client/user"
	"github.com/cvbarros/go-teamcity-sdk/client/vcs_root"
	"github.com/cvbarros/go-teamcity-sdk/client/vcs_root_instance"
)

// Default go teamcity sdk HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "teamcity.coolblue.eu"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new go teamcity sdk HTTP client.
func NewHTTPClient(formats strfmt.Registry) *GoTeamcitySdk {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new go teamcity sdk HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *GoTeamcitySdk {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new go teamcity sdk client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *GoTeamcitySdk {
	cli := new(GoTeamcitySdk)
	cli.Transport = transport

	cli.Agent = agent.New(transport, formats)

	cli.AgentPool = agent_pool.New(transport, formats)

	cli.Build = build.New(transport, formats)

	cli.BuildQueue = build_queue.New(transport, formats)

	cli.BuildType = build_type.New(transport, formats)

	cli.Change = change.New(transport, formats)

	cli.Debug = debug.New(transport, formats)

	cli.Federation = federation.New(transport, formats)

	cli.Group = group.New(transport, formats)

	cli.Investigation = investigation.New(transport, formats)

	cli.Mute = mute.New(transport, formats)

	cli.Operations = operations.New(transport, formats)

	cli.Problem = problem.New(transport, formats)

	cli.Project = project.New(transport, formats)

	cli.Server = server.New(transport, formats)

	cli.Test = test.New(transport, formats)

	cli.TestOccurrence = test_occurrence.New(transport, formats)

	cli.User = user.New(transport, formats)

	cli.VcsRoot = vcs_root.New(transport, formats)

	cli.VcsRootInstance = vcs_root_instance.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// GoTeamcitySdk is a client for go teamcity sdk
type GoTeamcitySdk struct {
	Agent *agent.Client

	AgentPool *agent_pool.Client

	Build *build.Client

	BuildQueue *build_queue.Client

	BuildType *build_type.Client

	Change *change.Client

	Debug *debug.Client

	Federation *federation.Client

	Group *group.Client

	Investigation *investigation.Client

	Mute *mute.Client

	Operations *operations.Client

	Problem *problem.Client

	Project *project.Client

	Server *server.Client

	Test *test.Client

	TestOccurrence *test_occurrence.Client

	User *user.Client

	VcsRoot *vcs_root.Client

	VcsRootInstance *vcs_root_instance.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *GoTeamcitySdk) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Agent.SetTransport(transport)

	c.AgentPool.SetTransport(transport)

	c.Build.SetTransport(transport)

	c.BuildQueue.SetTransport(transport)

	c.BuildType.SetTransport(transport)

	c.Change.SetTransport(transport)

	c.Debug.SetTransport(transport)

	c.Federation.SetTransport(transport)

	c.Group.SetTransport(transport)

	c.Investigation.SetTransport(transport)

	c.Mute.SetTransport(transport)

	c.Operations.SetTransport(transport)

	c.Problem.SetTransport(transport)

	c.Project.SetTransport(transport)

	c.Server.SetTransport(transport)

	c.Test.SetTransport(transport)

	c.TestOccurrence.SetTransport(transport)

	c.User.SetTransport(transport)

	c.VcsRoot.SetTransport(transport)

	c.VcsRootInstance.SetTransport(transport)

}
